# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Load the dataset
df = pd.read_csv(r"C:\Users\rodam\Downloads\data_cleaning_practice_dirty.csv")

# Drop unnecessary columns and replace various missing value indicators with actual NaNs
df = df.drop(columns=['CustomerID', 'Name']).replace(['', 'missing', 'NaN'], np.nan)

# Encode 'Gender' column: M -> 0, F -> 1 (Binary encoding since only two categories)
df['Gender'] = df['Gender'].map({'M':0, 'F':1})

# Convert 'Age' column to numeric, coercing errors to NaN, and fill missing values with the mean age
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')
df['Age'] = df['Age'].fillna(df['Age'].mean())

# Fill missing values in 'Job' and 'Department' with the most frequent (mode) value
df['Job'] = df['Job'].fillna(df['Job'].mode()[0])
df['Department'] = df['Department'].fillna(df['Department'].mode()[0])

# Fill missing values in 'Income' with the average (mean) income
df['Income'] = df['Income'].fillna(df['Income'].mean())

# One-hot encode categorical columns 'Job' and 'Department'
# WHY? Machine learning models like RandomForestRegressor can't handle text/categorical data directly.
# One-hot encoding converts each unique category into a separate binary (0/1) column.
# This allows the model to understand categorical data as numerical input.
df = pd.get_dummies(df, columns=['Job', 'Department']).astype(int)

# Separate features (X) and target variable (y)
X = df.drop(columns='Score')  # Features used to predict
y = df['Score']               # Target variable

# Split data into training and testing sets (70% training, 30% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and train the Random Forest Regressor model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on the test set and calculate R² score (model performance metric)
y_pred = model.predict(X_test)
r2_score_val = r2_score(y_test, y_pred)
print(f"R² score is: {r2_score_val:.2f}")  # Closer to 1 is better

# Create a new sample for prediction (make sure it has all the same columns as X)
new_data = pd.DataFrame({
    'Gender': [0],
    'Age': [23],
    'Income': [1234],
    'Job_Clerk': [0],
    'Job_Engineer': [1],    # Specify the job category using one-hot encoding
    'Job_Manager': [0],
    'Job_Technician': [0],
    'Job_Analyst': [0],
    'Department_HR': [0],
    'Department_IT': [0],
    'Department_Finance': [0],
    'Department_Sales': [0],
    'Department_Operations': [0]
})

# Ensure the order of columns in new_data matches the training data
new_data = new_data[X.columns]

# Predict the score for the new input
predicted_score = model.predict(new_data)
print(f"Predicted score is: {predicted_score[0]:.2f}")

# Print the column names of the processed dataframe
print(df.columns)
