import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score


df = pd.read_csv(r"C:\Users\rodam\Downloads\data_cleaning_practice_dirty.csv")
df = df.drop(columns = ['CustomerID', 'Name']).replace(['', 'missing', 'NaN'], np.nan)

df['Gender'] = df['Gender'].map({'M':0, 'F':1})
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')
df['Age'] = df['Age'].fillna(df['Age'].mean())

df['Job'] = df['Job'].fillna(df['Job'].mode()[0])
df['Department'] = df['Department'].fillna(df['Department'].mode()[0])
df['Income'] = df['Income'].fillna(df['Income'].mean())

df = pd.get_dummies(df, columns=['Job', 'Department']).astype(int)


X = df.drop(columns='Score')
y = df['Score']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
r2_score_val = r2_score(y_test, y_pred)
print(f"RÂ² score is: {r2_score_val:.2f}")

new_data = pd.DataFrame({
    'Gender': [0],
    'Age': [23],
    'Income': [1234],
    'Job_Clerk': [0],
    'Job_Engineer': [1],  # Example, change according to your actual dummy column names
    'Job_Manager': [0],  # Add all possible dummy variables
    'Job_Technician': [0],
    'Job_Analyst' : [0],
    'Department_HR': [0],
    'Department_IT': [0],
    'Department_Finance': [0],
    'Department_Sales': [0],
    'Department_Operations': [0]

})

new_data = new_data[X.columns]
# Predict the score for new data
predicted_score = model.predict(new_data)
print(f"Predicted score is: {predicted_score[0]:.2f}")

print(df.columns)
